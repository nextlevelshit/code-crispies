{
	"$schema": "../schemas/code-crispies-module-schema.json",
	"id": "css-basic-selectors",
	"title": "Basic Selectors",
	"description": "CSS selectors are the foundation of styling web pages, allowing you to target specific HTML elements for styling. This module introduces fundamental selector types including element type selectors, class selectors, ID selectors, and the universal selector.",
	"difficulty": "beginner",
	"lessons": [
		{
			"id": "introduction-to-selectors",
			"title": "What is a CSS Selector?",
			"description": "A CSS selector is the first part of a CSS rule that tells the browser which HTML elements should receive the styles defined in the declaration block. Selectors are essentially patterns that match against elements in your HTML document. Understanding selectors is fundamental because they determine which elements your CSS rules will affect. The element or elements targeted by a selector are referred to as the 'subject of the selector.' When writing a CSS rule, you first specify the selector, followed by curly braces that contain the style declarations.<br/>For example, to change the text color of elements, you can use the <kbd>color</kbd> property within your declaration block.<br><br><pre>/* Element selector */\np {\n  color: orangered;\n  /* │       └─── Indicates the value of the expression\n     │                                                     \n     └─────────── Indicates the property of the expression */\n}</pre>",
			"task": "Write a CSS rule using a type selector that targets all paragraph elements <kbd>p</kbd> in the document. Make the text blue by setting the <kbd>color</kbd> property to <kbd>blue</kbd>.",
			"previewHTML": "<h1>Introduction to CSS Selectors</h1>\n<p>This paragraph should turn blue.</p>\n<div>This div element should remain unchanged.</div>\n<p>This second paragraph should also turn blue.</p>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; }",
			"sandboxCSS": "h1, p, div { padding: 8px; margin-bottom: 10px; border: 1px dashed #ccc; }",
			"codePrefix": "/* Write a type selector to target all paragraph elements */\n",
			"initialCode": "",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"solution": "p { color: blue }",
			"validations": [
				{
					"type": "regex",
					"value": "^p\\s*{",
					"message": "Start your rule with <kbd>p { … }</kbd> to select all paragraph elements",
					"options": {
						"caseSensitive": false
					}
				},
				{
					"type": "contains",
					"value": "color:",
					"message": "Include the <kbd>color:</kbd> property in your CSS rule"
				},
				{
					"type": "contains",
					"value": "blue",
					"message": "Set the color value to <kbd>blue</kbd>"
				},
				{
					"type": "property_value",
					"value": {
						"property": "color",
						"expected": "blue"
					},
					"message": "Use <kbd>color: blue</kbd> to set the text color"
				},
				{
					"type": "regex",
					"value": "p\\s*{[^}]*}",
					"message": "Make sure to close your CSS rule with a closing brace <kbd>}</kbd>",
					"options": {
						"caseSensitive": false
					}
				}
			]
		},
		{
			"id": "type-selectors",
			"title": "Type Selectors: Targeting HTML Elements",
			"description": "Type selectors (also called tag name selectors or element selectors) target HTML elements based on their tag name. For example, <kbd>p</kbd> selects all paragraph elements, <kbd>h1</kbd> selects all level-one headings, and <kbd>div</kbd> selects all division elements. Type selectors are the most fundamental way to select elements, applying styles consistently to all instances of a particular HTML element throughout your document. You can define a variety of CSS properties with type selectors, such as <kbd>color</kbd> for text color, <kbd>background-color</kbd> for the background, and <kbd>font-weight</kbd> for text emphasis. They provide a broad approach for styling your page and are often the starting point for more specific styling using other selector types.",
			"task": "Write three separate CSS rules using type selectors to target specific HTML elements: make <kbd>h2</kbd> headings <kbd>purple</kbd>, give <kbd>span</kbd> elements a <kbd>yellow</kbd> background, and make <kbd>strong</kbd> elements <kbd>red</kbd>.",
			"previewHTML": "<h2>Type Selectors Example</h2>\n<p>Regular paragraph text <span>with a highlighted span</span> that should have a yellow background.</p>\n<p>Another paragraph with <strong>strong important text</strong> that should be red.</p>\n<h2>Another Heading</h2>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; }",
			"sandboxCSS": "h2, p, span, strong { padding: 3px; }",
			"codePrefix": "/* Write three separate type selectors below */\n\n",
			"initialCode": "/* 1. Make h2 headings purple */\n\n\n/* 2. Give span elements a yellow background */\n\n\n/* 3. Make strong elements red */\n",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"solution": "/* 1. Make h2 headings purple */\nh2 {\n  color: purple;\n}\n\n/* 2. Give span elements a yellow background */\nspan {\n  background-color: yellow;\n}\n\n/* 3. Make strong elements red */\nstrong {\n  color: red;\n}",
			"validations": [
				{
					"type": "regex",
					"value": "^h2\\s*{",
					"message": "Include an <kbd>h2 { … }</kbd> selector"
				},
				{
					"type": "property_value",
					"value": {
						"property": "color",
						"expected": "purple"
					},
					"message": "Set the <kbd>color</kbd> property to <kbd>purple</kbd> for h2 elements"
				},
				{
					"type": "regex",
					"value": "h2\\s*{[^}]*}",
					"message": "Make sure to close your h2 rule with a closing brace <kbd>}</kbd>"
				},
				{
					"type": "regex",
					"value": "^span\\s*{",
					"message": "Include a <kbd>span { … }</kbd> selector"
				},
				{
					"type": "property_value",
					"value": {
						"property": "background-color",
						"expected": "yellow"
					},
					"message": "Set a <kbd>background-color: yellow</kbd> for span elements"
				},
				{
					"type": "regex",
					"value": "span\\s*{[^}]*}",
					"message": "Make sure to close your span rule with a closing brace <kbd>}</kbd>"
				},
				{
					"type": "regex",
					"value": "^strong\\s*{",
					"message": "Include a <kbd>strong { … }</kbd> selector"
				},
				{
					"type": "regex",
					"value": "strong\\s*{\\s*color:\\s*red;[^}]*}",
					"message": "Set the <kbd>color: red</kbd> for strong elements"
				}
			]
		},
		{
			"id": "class-selectors",
			"title": "Class Selectors: Styling Element Groups",
			"description": "Class selectors target elements with a specific class attribute value. They begin with a dot (.) followed by the class name. Classes are powerful because they allow you to apply the same styles to multiple elements regardless of their type. An HTML element can have multiple classes (separated by spaces in the class attribute), and a class can be applied to any number of elements. When using class selectors, you can apply properties like <kbd>background-color</kbd> to set the background color of elements, and <kbd>font-weight</kbd> to control text thickness, making text bold or normal. This flexibility makes class selectors one of the most commonly used methods for applying styles in CSS, allowing for modular and reusable styling across your website.",
			"task": "Create a CSS rule using a class selector that targets elements with the class <kbd>highlight</kbd>. Give these elements a <kbd>yellow</kbd> background and <kbd>bold</kbd> text.",
			"previewHTML": "<h2>Using Class Selectors</h2>\n<p>This is a regular paragraph, but <span class=\"highlight\">this span has the highlight class</span> applied to it.</p>\n<p class=\"highlight\">This entire paragraph has the highlight class.</p>\n<ul>\n  <li>Regular list item</li>\n  <li class=\"highlight\">This list item is highlighted</li>\n</ul>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; }",
			"sandboxCSS": "h2, p, li { padding: 5px; margin-bottom: 10px; }",
			"codePrefix": "/* Create a class selector for elements with the 'highlight' class */\n",
			"initialCode": "",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"validations": [
				{
					"type": "regex",
					"value": "^\\.highlight\\s*{",
					"message": "Start your rule with <kbd>.highlight { … }</kbd> to create a class selector",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "background-color:",
					"message": "Include the <kbd>background-color:</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "background-color",
						"expected": "yellow"
					},
					"message": "Set the background color to <kbd>yellow</kbd>"
				},
				{
					"type": "contains",
					"value": "font-weight:",
					"message": "Include the <kbd>font-weight:</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "font-weight",
						"expected": "bold"
					},
					"message": "Set the font-weight to <kbd>bold</kbd>"
				},
				{
					"type": "regex",
					"value": "\\.highlight\\s*{[^}]*}",
					"message": "Make sure to close your CSS rule with a closing brace <kbd>}</kbd>",
					"options": {
						"caseSensitive": true
					}
				}
			]
		},
		{
			"id": "multiple-classes",
			"title": "Working with Multiple Classes",
			"description": "HTML elements can have multiple classes applied simultaneously, allowing for composable and modular CSS designs. When an element has multiple classes, it will receive styles from all matching class selectors. This approach enables you to build a library of reusable CSS classes that can be combined in different ways. You can also target elements that have a specific combination of classes by chaining class selectors together without spaces (e.g., <kbd>.class1.class2</kbd>). When styling these elements, you might use properties like <kbd>border-color</kbd> to change the color of element borders, and <kbd>background-color</kbd> to set the background color of elements. This technique lets you create conditional styles that only apply when certain classes appear together.",
			"task": "Complete the CSS rule that targets elements with both <kbd>card</kbd> and <kbd>featured</kbd> classes by chaining the selectors. Set the border-color to gold and the background-color to lemonchiffon to make featured cards stand out.",
			"previewHTML": "<h2>Multiple Class Combinations</h2>\n<div class=\"card\">Regular Card</div>\n<div class=\"card featured\">Featured Card</div>\n<div class=\"featured\">Just Featured (not a card)</div>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; } .card { border: 2px solid gray; padding: 15px; margin-bottom: 10px; border-radius: 5px; }",
			"sandboxCSS": "",
			"codePrefix": "/* The .card class already has basic styling */\n/* Now target elements with BOTH classes: 'card' AND 'featured' */\n",
			"initialCode": "",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"solution": ".card.featured { border-color: gold; background-color: lemonchiffon }",
			"validations": [
				{
					"type": "regex",
					"value": "^\\.card\\.featured\\s*{",
					"message": "Chain the selectors as <kbd>.card.featured</kbd> (no space between them)",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "border-color:",
					"message": "Include the <kbd>border-color</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "border-color",
						"expected": "gold"
					},
					"message": "Set the border color to <kbd>gold</kbd>"
				},
				{
					"type": "regex",
					"value": "\\.card\\.featured\\s*{[^}]*;",
					"message": "Make sure to end your CSS rule with a semicolon <kbd>;</kbd>"
				},
				{
					"type": "contains",
					"value": "background-color:",
					"message": "Include the <kbd>background-color</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "background-color",
						"expected": "lemonchiffon"
					},
					"message": "Set the background color to <kbd>lemonchiffon</kbd>"
				},
				{
					"type": "regex",
					"value": "\\.card\\.featured\\s*{[^}]*}",
					"message": "Make sure to close your CSS rule with a closing brace <kbd>}</kbd>",
					"options": {
						"caseSensitive": true
					}
				}
			]
		},
		{
			"id": "class-with-type",
			"title": "Combining Type and Class Selectors",
			"description": "You can combine type selectors with class selectors to target specific HTML elements that have a certain class. This creates a more specific selector that only matches when both conditions are true: the element is of the specified type AND it has the specified class. For example, <kbd>p.note</kbd> would select paragraph elements with the class <kbd>note</kbd>, but would not select divs or spans with that same class. You can style these combined selections using properties like <kbd>background-color</kbd> to set a colored background for your elements. This approach allows you to apply different styles to the same class when it appears on different element types.",
			"task": "Create a CSS rule that specifically targets <kbd>&lt;span&gt;</kbd> elements with the class <kbd>highlight</kbd>. Make those elements have an orange background, while other elements with the highlight class remain untouched.",
			"previewHTML": "<h2>Type and Class Combinations</h2>\n<p>This paragraph has a <span class=\"highlight\">highlighted span</span> that should have an orange background.</p>\n<p class=\"highlight\">This paragraph has the highlight class but should NOT have an orange background.</p>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; } .highlight { font-weight: bold; }",
			"sandboxCSS": "h2, p, span { padding: 5px; }",
			"codePrefix": "/* The .highlight class already sets font-weight to bold */\n/* Now target ONLY span elements with the highlight class */\n",
			"initialCode": "",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"validations": [
				{
					"type": "regex",
					"value": "^span\\.highlight\\s*{",
					"message": "Use <kbd>span.highlight</kbd> selector (no space between element and class)",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "background-color:",
					"message": "Include the <kbd>background-color</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "background-color",
						"expected": "orange"
					},
					"message": "Set the background color to <kbd>orange</kbd>"
				},
				{
					"type": "regex",
					"value": "span\\.highlight\\s*{[^}]*}",
					"message": "Make sure to close your CSS rule with a closing brace <kbd>}</kbd>",
					"options": {
						"caseSensitive": true
					}
				}
			]
		},
		{
			"id": "id-selectors",
			"title": "ID Selectors: Targeting Unique Elements",
			"description": "ID selectors target elements with a specific id attribute. They begin with a hash/pound sign (#) followed by the ID name. Unlike classes, IDs must be unique within a document—each ID value should be used only once per page. ID selectors have higher specificity than class or element selectors, meaning they override those selectors when conflicts arise. When styling with ID selectors, you can use properties like <kbd>color</kbd> to define text color, and <kbd>text-decoration</kbd> to control the appearance of text, such as adding underlines to elements. Because of their uniqueness requirement, IDs are best used for one-of-a-kind elements like page headers, main navigation, or specific unique components that appear only once on a page.",
			"task": "Create a CSS rule with an ID selector that targets the element with the ID <kbd>main-title</kbd>. Set its color to purple and add an underline with <kbd>text-decoration: underline</kbd>.",
			"previewHTML": "<h1 id=\"main-title\">Main Page Title</h1>\n<p>Regular paragraph content.</p>\n<h2>Secondary Heading</h2>\n<p id=\"intro\">Introduction paragraph (different ID).</p>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; }",
			"sandboxCSS": "h1, h2, p { padding: 8px; margin-bottom: 10px; border: 1px dashed #ccc; }",
			"codePrefix": "/* Create an ID selector to target the element with id=\"main-title\" */\n",
			"initialCode": "",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"validations": [
				{
					"type": "regex",
					"value": "^#main-title\\s*{",
					"message": "Start your rule with <kbd>#main-title</kbd> to create an ID selector",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "color:",
					"message": "Include the <kbd>color</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "color",
						"expected": "purple"
					},
					"message": "Set the color to <kbd>purple</kbd>"
				},
				{
					"type": "contains",
					"value": "text-decoration:",
					"message": "Include the <kbd>text-decoration</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "text-decoration",
						"expected": "underline"
					},
					"message": "Set the text-decoration to <kbd>underline</kbd>"
				},
				{
					"type": "regex",
					"value": "#main-title\\s*{[^}]*}",
					"message": "Make sure to close your CSS rule with a closing brace <kbd>}</kbd>",
					"options": {
						"caseSensitive": true
					}
				}
			]
		},
		{
			"id": "id-with-type",
			"title": "Combining Type and ID Selectors",
			"description": "Similar to how you can combine type and class selectors, you can also combine type selectors with ID selectors. For example, <kbd>h1#title</kbd> targets an h1 element with the ID 'title'. When using this combined approach, you can apply CSS properties like <kbd>font-style</kbd> to control the slant of the text, making it italic or normal. While this selector combination is more specific than using just the ID selector, it's often unnecessary since IDs should already be unique in a document. However, this technique can be useful for improving code readability or when you want to emphasize that a particular ID should only appear on a specific element type.",
			"task": "Create a CSS rule that combines a type selector with an ID selector to target specifically a paragraph element with the ID <kbd>special</kbd>. Set its font style to italic.",
			"previewHTML": "<h2 id=\"special\">Heading with ID \"special\" (should NOT be affected)</h2>\n<p id=\"special\">Paragraph with ID \"special\" (should become italic)</p>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; }",
			"sandboxCSS": "h2, p { padding: 8px; margin-bottom: 10px; border: 1px dashed #ccc; }",
			"codePrefix": "/* Create a combined type+ID selector for a paragraph with id=\"special\" */\n",
			"initialCode": "",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"validations": [
				{
					"type": "regex",
					"value": "^p#special\\s*{",
					"message": "Use <kbd>p#special</kbd> to target paragraphs with ID 'special'",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "font-style:",
					"message": "Include the <kbd>font-style</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "font-style",
						"expected": "italic"
					},
					"message": "Set the font-style to <kbd>italic</kbd>"
				},
				{
					"type": "regex",
					"value": "p#special\\s*{[^}]*}",
					"message": "Make sure to close your CSS rule with a closing brace <kbd>}</kbd>",
					"options": {
						"caseSensitive": true
					}
				}
			]
		},
		{
			"id": "selector-lists",
			"title": "Selector Lists: Applying the Same Rules to Multiple Selectors",
			"description": "When multiple elements need the same styling, you can group them together using a selector list (also known as grouping selectors). Selector lists are created by separating individual selectors with commas. This approach reduces repetition in your CSS, making it more maintainable and efficient. For example, <kbd>h1, h2, h3 { color: blue; }</kbd> applies the same blue color to all three heading levels. When styling multiple selectors at once, you can apply properties like <kbd>background-color</kbd> to set the background, <kbd>border-left</kbd> to create a left border with a specific thickness, style, and color, and <kbd>padding-left</kbd> to create space between the content and the left border. Whitespace around commas is optional, and each selector in the list can be any valid selector type-elements, classes, IDs, or even more complex selectors.",
			"task": "Create a selector list that applies the same styles to three different elements: paragraphs with class <kbd>note</kbd>, list items with class <kbd>important</kbd>, and the element with ID <kbd>summary</kbd>. Give them a <kbd>lightyellow</kbd> background, a <kbd>gold</kbd> left border, and some left <kbd>padding</kbd>.",
			"previewHTML": "<p class=\"note\">This is a note paragraph.</p>\n<ul>\n  <li>Regular list item</li>\n  <li class=\"important\">Important list item</li>\n</ul>\n<div id=\"summary\">Summary section</div>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; }",
			"sandboxCSS": "p, li, div { padding: 8px; margin-bottom: 8px; border: 1px dashed gray; }",
			"codePrefix": "/* Create a selector list to apply the same styles to multiple different elements */\n",
			"initialCode": "",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"solution": "p.note,\nli.important,\n#summary {\n  background-color: lightyellow;\n  border-left: 3px solid gold;\n  padding-left: 10px\n}",
			"validations": [
				{
					"type": "contains",
					"value": "p.note",
					"message": "Include <kbd>p.note</kbd> in your selector list",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "li.important",
					"message": "Include <kbd>li.important</kbd> in your selector list",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "#summary",
					"message": "Include <kbd>#summary</kbd> in your selector list",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "regex",
					"value": "(p\\.note|li\\.important|#summary)\\s*,\\s*(p\\.note|li\\.important|#summary)\\s*,\\s*(p\\.note|li\\.important|#summary)",
					"message": "Create a comma-separated list with all three selectors",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "background-color:",
					"message": "Include the <kbd>background-color</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "background-color",
						"expected": "lightyellow"
					},
					"message": "Set the background color to <kbd>lightyellow</kbd>"
				},
				{
					"type": "contains",
					"value": "border-left:",
					"message": "Include the <kbd>border-left</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "border-left",
						"expected": "3px solid gold"
					},
					"message": "Use <kbd>border-left: 3px solid gold</kbd> to create a left border"
				},
				{
					"type": "contains",
					"value": "padding-left:",
					"message": "Include the <kbd>padding-left</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "padding-left",
						"expected": "10px"
					},
					"message": "Use <kbd>padding-left: 10px</kbd> to add left padding"
				}
			]
		},
		{
			"id": "universal-selector",
			"title": "The Universal Selector: Targeting Everything",
			"description": "The universal selector is denoted by an asterisk (*) and matches any element of any type. It selects everything in the document or, when combined with other selectors, everything within a specific context. For example, <kbd>* { margin: 0; }</kbd> removes margins from all elements, while <kbd>article *</kbd> selects all elements inside article elements. When using the universal selector in combination with other selectors, you can apply properties like <kbd>margin</kbd> to control the spacing around elements. The universal selector is powerful but should be used carefully due to its broad impact. It's commonly used in CSS resets, to override default browser styling, or to target all children of a particular element.",
			"task": "Use the universal selector to remove margins from all elements inside the container div. Create a rule using <kbd>div.container *</kbd> as the selector and set <kbd>margin: 0</kbd>.",
			"previewHTML": "<div class=\"container\">\n  <h2>Inside Container</h2>\n  <p>This paragraph is inside the container.</p>\n  <ul>\n    <li>List item inside container</li>\n  </ul>\n</div>\n<p>This paragraph is outside the container and should not be affected.</p>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; } div.container { border: 2px solid navy; padding: 15px; background-color: lavender; } h2, p, ul, li { margin: 15px 0; }",
			"sandboxCSS": "",
			"codePrefix": "/* Use the universal selector to target all elements inside the container */\n",
			"initialCode": "",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"validations": [
				{
					"type": "regex",
					"value": "^div\\.container\\s+\\*\\s*{",
					"message": "Use <kbd>div.container *</kbd> selector (with a space between container and *)",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "margin:",
					"message": "Include the <kbd>margin</kbd> property"
				},
				{
					"type": "property_value",
					"value": {
						"property": "margin",
						"expected": "0"
					},
					"message": "Set margin to <kbd>0</kbd>"
				},
				{
					"type": "regex",
					"value": "div\\.container\\s+\\*\\s*{[^}]*}",
					"message": "Make sure to close your CSS rule with a closing brace <kbd>}</kbd>",
					"options": {
						"caseSensitive": true
					}
				}
			]
		},
		{
			"id": "specificity-basics",
			"title": "Understanding Selector Specificity",
			"description": "CSS specificity determines which styles take precedence when multiple conflicting rules target the same element. Specificity follows a hierarchical system: inline styles have the highest specificity, followed by ID selectors, then class/attribute/pseudo-class selectors, and finally element/pseudo-element selectors. This can be conceptualized as a four-part score (inline, ID, class, element). When creating multiple rules that may target the same elements, you can use the <kbd>color</kbd> property to set text colors, and specificity will determine which color is actually applied. Understanding specificity is crucial for predictable styling and debugging CSS conflicts. When two selectors have equal specificity, the one that comes last in the stylesheet wins.",
			"task": "Examine the existing CSS rules and add a new rule with higher specificity to override the text color of the paragraph. Create a rule using '.content p' as the selector and set color: green.",
			"previewHTML": "<div class=\"content\">\n  <p>What color will this paragraph be? Look at the CSS rules and their specificity.</p>\n</div>",
			"previewBaseCSS": "body { font-family: sans-serif; line-height: 1.5; padding: 20px; }",
			"sandboxCSS": "p { border: 1px dashed gray; padding: 10px; }",
			"codePrefix": "/* These CSS rules target the same paragraph but have different specificity */\n\n/* Rule 1: Element selector (lowest specificity) */\np {\n  color: red;\n}\n\n/* Rule 2: Descendant selector (higher specificity than just 'p') */\n",
			"initialCode": "",
			"codeSuffix": "",
			"previewContainer": "preview-area",
			"validations": [
				{
					"type": "regex",
					"value": "^\\.content\\s+p\\s*{",
					"message": "Use <kbd>.content p</kbd> as your selector (note the space between)",
					"options": {
						"caseSensitive": true
					}
				},
				{
					"type": "contains",
					"value": "color:",
					"message": "Include the <kbd>color</kbd> property"
				},
				{
					"type": "contains",
					"value": "green",
					"message": ""
				}
			]
		}
	]
}
